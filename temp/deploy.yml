# This is a basic workflow to help you get started with Actions

name: deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push only for the "master" branch
  push:
    branches: [ "master" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "deploy"
  deploy:
    name: Laravel (PHP ${{ matrix.php-versions }})
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      DB_DATABASE: blog
      DB_USERNAME: root
      DB_PASSWORD: 
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: 
          MYSQL_DATABASE: blog
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      fail-fast: false
      matrix:
        php-versions: ['7.4']
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Docs: https://github.com/shivammathur/setup-php
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, dom, fileinfo, mysql
          coverage: xdebug

      # Local MySQL service in GitHub hosted environments is disabled by default.
      # If you are using it instead of service containers, make sure you start it.
      # - name: Start mysql service
      #   run: sudo systemctl start mysql.service

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          # Use composer.json for key, if composer.lock is not committed.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        working-directory: ./app
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Prepare the application
        working-directory: ./app
        run: |
          php -r "file_exists('.env') || copy('.env.sample', '.env');"
          php artisan key:generate

      - name: Clear Config
        working-directory: ./app
        run: php artisan config:clear

      - name: Run Migration
        working-directory: ./app
        run: php artisan migrate --force
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}

      - name: Setup key
        run: set -eu
        run: mkdir "$HOME/.ssh"
        run: echo "${{ secret.key }}" > "$HOME/.ssh/key"
        run: chmod 600 "$HOME/.ssh/key"
 
      - name: Deploy
        working-directory: ./app
        run rsync -e "ssh -i $HOME/.ssh/key -o StrictKeyChecking=no" --archive --compress --delete address@address.com:/var/www/html/address
