version: '3'

services:
    nginx:
        image: nginx:1.16-alpine
        restart: unless-stopped
        container_name: blog-nginx
        working_dir: /app
        ports:
            - ${NGINX_PORT}:80
            - ${NGINX_SECURE_PORT}:443
        volumes:
            - ./app:/app
            - ./docker/nginx/conf.d/:/etc/nginx/conf.d/
            - ./docker/nginx/certs/:/etc/nginx/ssl/
        networks:
            - internal_blog

    php-fpm:
        build:
            context: ./docker
            dockerfile: php-fpm.docker
        restart: unless-stopped
        container_name: blog-php-fpm
        extra_hosts:
            - "host.docker.internal:host-gateway"
        environment:
            - PHP_EXTENSION_XDEBUG:1
            - XDEBUG_MODE=develop,debug
        depends_on:
            - mysql
        volumes:
            - ./app:/app
            - ./docker/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
            - ./app/storage/logs:/var/logs/xdebug
        networks:
            - internal_blog

    php-cli:
        build:
            context: ./docker
            dockerfile: php-cli.docker
        container_name: blog-php-cli
        volumes:
            - ./app:/app
            - composer:/root/.composer/cache
        depends_on:
            - mysql
        networks:
            - internal_blog

    node:
        build:
            context: ./docker
            dockerfile: node.docker
        container_name: blog-node
        volumes:
            - ./app:/app
        working_dir: /app
        networks:
            - internal_blog

    mysql:
        image: mysql:5.7
        command: --default-authentication-plugin=mysql_native_password
        restart: always
        container_name: blog-mysql
        tty: true
        environment:
            - MYSQL_DATABASE=${DB_DATABASE}
            - MYSQL_USER=${DB_USERNAME}
            - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
            - MYSQL_PASSWORD=${DB_PASSWORD}
        volumes:
            - dbdata:/var/lib/mysql
        ports:
            - ${DB_PORT}:3306
        networks:
            internal_blog:
                ipv4_address: 192.168.240.7

    rabbitmq:
        image: 'rabbitmq:3.6-management-alpine'
        container_name: blog-rabbitmq
        ports:
            # The standard AMQP protocol port
            - ${RABBITMQ_AMQP}:5672
            # HTTP management UI
            - ${RABBITMQ_HTTP_UI}:15672
        environment:
            # The location of the RabbitMQ server.  "amqp" is the protocol;
            # "rabbitmq" is the hostname.  Note that there is not a guarantee
            # that the server will start first!  Telling the pika client library
            # to try multiple times gets around this ordering issue.
            AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'
            RABBITMQ_DEFAULT_USER: "guest"
            RABBITMQ_DEFAULT_PASS: "guest"
        networks:
            - internal_blog

    swagger-ui:
        image: swaggerapi/swagger-ui
        container_name: blog-swagger
        ports:
            - ${SWAGGER_PORT}:8080
        volumes:
            - ./app/doc:/usr/share/nginx/html/doc
        environment:
            API_URL: doc/openapi.yaml

volumes:
  composer:
  dbdata:

networks:
    internal_blog:
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 192.168.240.0/28
